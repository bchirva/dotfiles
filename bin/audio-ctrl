#!/usr/bin/env bash

function main() {
    local -r help_msg="audio-ctrl
        list <input/output> - print json-list of available devices
        info <input/output> - print json-object with active device properties
        choose <input/output> <id> - choose active device
        set <input/output> <args> 
            -m - toggle mute
            -v <volume level> - change volume (in %)"

    case $1 in 
        list) device_list "$2";; 
        info) active_device_info "$2";; 
        choose) change_active_device "${@:2}";;
        set) change_active_device_settings "${@:2}";;
        -h|--help) echo -e "${help_msg}";;
        *) exit 2;;
    esac
}

function device_list {
    local -r device_type=$1
    case $device_type in
        "output") 
            local -r device_list="$(pactl list sinks)"
            local -r get_volume_cmd=(pactl get-sink-volume)
            local -r get_muted_cmd=(pactl get-sink-mute)
            local -r device_id="Sink #"
        ;;
        "input")  
            device_list="$(pactl list sources)"
            local -r get_volume_cmd=(pactl get-source-volume)
            local -r get_muted_cmd=(pactl get-source-mute)
            local -r device_id="Source #"
        ;;
        *) exit 2
    esac

    local id device name volume muted json_array="[]"
    for ((i = 0; i < $(grep -c "${device_id}" <<< "${device_list}"); i++))
    do
        if [ "${device_type}" == "input" ] \
            && [ "$(grep -e "Monitor of Sink" <<< "${device_list}" \
            | head -n $((i + 1)) \
            | tail -n 1 \
            | awk '{print $4}')" != "n/a" ]; then
            continue
        fi

        id=$(grep -e "Name:" <<< "${device_list}" \
            | head -n $((i + 1)) \
            | tail -n 1 \
            | awk '{print $2}') 
        device=$(grep -e 'Active Port' <<< "${device_list}" \
            | head -n $((i + 1)) \
            | tail -n 1 \
            | awk '{print $3}')
        name=$(grep -e "${device}" <<< "${device_list}" \
            | head -n 1 \
            | cut -d ':' -f 2 \
            | cut -d '(' -f 1 \
            | sed 's/^[[:blank:]]*//g;s/[[:blank:]]*$//g')
        volume=$("${get_volume_cmd[@]}" "${id}" \
            | awk '{print $5}' \
            | sed 's/%//g')
        muted=$("${get_muted_cmd[@]}" "${id}" \
            | awk '{print $2}' \
            | flag-to-bool)
       
        json_array=$(jq  ". += [{\
            id: \"${id}\", \
            port: \"${device}\", \
            name: \"${name}\", \
            volume: ${volume}, \
            muted: ${muted} \
        }]" <<< "${json_array}")
    done

    echo "${json_array}"
}

function active_device_info {
    local -r device_type=$1

    case $device_type in
        "output") local -r id=$(pactl get-default-sink) ;;
        "input")  local -r id=$(pactl get-default-source) ;;
        *) exit 2 
    esac

    device_list "${device_type}" | jq ".[] | select(.id == \"${id}\")"
}

function change_active_device {
    local -r device_type=$1
    local -r device_id=$2
    
    case $device_type in
        "output")
            local -r set_active_device_cmd=(pactl set-default-sink)
            local -r move_channel_to_device_cmd=(pactl move-sink-input)
            local -r channels=$(pactl list sink-inputs short)
            ;;
        "input")
            local -r set_active_device_cmd=(pactl set-default-source)
            local -r move_channel_to_device_cmd=(pactl move-source-output)
            local -r channels=$(pactl list source-outputs short)
            ;;
        *) exit 2
    esac

    "${set_active_device_cmd[@]}" "$device_id"
    for ((i = 0; i < $(wc -l <<< "$channels"); i++))
    do
        "${move_channel_to_device_cmd[@]}" "$(head -n $((i + 1)) <<< "${channels}" \
            | tail -n 1 \
            | awk '{print $1}')" "${device_id}"
    done 
}

function change_active_device_settings {
    local -r device_type=$1

    case $device_type in
    "output")
        local -r id=$(pactl get-default-sink)
        local -r set_volume_cmd=(pactl set-sink-volume)
        local -r set_muted_cmd=(pactl set-sink-mute)
    ;;
    "input")
        local -r id=$(pactl get-default-source)
        local -r set_volume_cmd=(pactl set-source-volume)
        local -r set_muted_cmd=(pactl set-source-mute)
    ;;
    *) exit 2
    esac

    shift
    while getopts v:m PARAMS
    do
        case "${PARAMS}" in
            v) "${set_volume_cmd[@]}" "${id}" "${OPTARG}%" ;;
            m) "${set_muted_cmd[@]}" "${id}" toggle ;;
            *) exit 2 ;;
        esac
    done
}

main "$@"
